{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardsArray","map","user","i","Components_Card","key","SearchBox","searchField","searchChange","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","setState","Component","App","onSearchChange","event","target","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","fontSize","Components_SearchBox","src_Scroll","ErrorBoundry","Components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Containers_App"],"mappings":"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","file":"static/js/main.13a6b866.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    // const { name, email, id } = props;\n\n    // destructuring (es6) so that we dont have to add props.name etc to the \n    // html below. makes things tidier. \n\n    // weve just copied and pasted this into the parameters but I commented\n    // // out what used to be there so that I could still have this understanding. but\n    // all thats happening here is we are reciving props paramters destruitng itin the brackets\n        \n\n    return(\n        <div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'> \n        {/* this is just tachyon classes. no need to import\n        tachyon here. its already in index.js.   */}\n\n            <img alt='robophoto' src={`https://robohash.org/${id}?200x200`} />\n            {/* here we hav used backticks (es6 template strings) on the src link. this makes it \n            dynamix so that we can add any valyes we want and make any type of expressions\n            all in one line. so here we added a ${props.id} expression which randomizes \n            the images of the robofrieds   */}\n\n            <div>\n                <h2>{name}</h2>\n                {/* //card is taking these properties (name and email) from the Cardlist map array */}\n                <p>{email}</p>\n                {/* <p>{id}</p> */}\n                \n                {/* these are js expressions so they have to be wrapped\n                in curly brackets . This is how jsx works since this isnt proper html\n            . but it is also good practice to always wrap js statements in curly brackets \n            to avoid bugs & increase code clarity */}\n\n            </div>\n        </div>\n\n    );\n}\n\n// so here we have used props. remember these are arguments passed into react components. \n// They are usually passed to components via HTML attribute. here we have passed\n// the values within the Card component\n\n//also cardlist is the parent element here. and robots as a component has already been \n// passed to its parent element. as such there is no need to import robots here\n//  since it already has access to it through its parent \n\n// LOOK HERE ^ in terms of AnimationPlaybackEvent, there was props.name, props.id and props.email \n// but we used destructuring and removed the props.\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    // we have access to robots here without having to import it because robots was passed\n    // to the cardlist component as a prop in index.js. thisis also destructuring, it is using the \n    // robots object keys and taking the target values\n\n    const cardsArray = robots.map((user,i) => {\n        return <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email}/>\n\n        // multiple advantages to using map. 1) shorter than foEach 2) dont need to state\n        // the amount of iternations. ist will just loop through them all\n\n        // key used so that each item in the array cna be identified. better if you used like id or any other \n        // string value that is used in each array element. \n    })\n\n    return (\n        <div>\n            {cardsArray}\n            {/* this is calling on the map loop above. remeber curly brakcets for JS */}\n            \n            {/* you could also choose to copy and paste the code above into these brackets since it\n            is for js anyway and remove the varibale. but I chose not to since ive already made fairly complex notes\n            change this if you have to */}\n\n            {/* old way */}\n\n            {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n            <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n            <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> */}\n             \n             {/* here we were accessing the propertes of the objects. we are able to because\n             we have imported the object from robots.js. the syntax for accessing properties of an object is \n             objectName.property but it has been commeted out beucase we are using the map loop\n             above that will go through each item in the array without lots of code */} \n  \n        </div>\n  \n            //  {/* all this is doing is creating multiple cards.\n            // they will all have the detail needed. check index.js */}\n  \n            // {/* remeber that react only expects you to return one element.\n            //  wrap things in divs */}\n    );\n}\n\nexport default CardList\n\n","import React from 'react';\n\n\n\nconst SearchBox = ({searchField, searchChange}) => {\n    // again this is just destructuring. {...} allows us to grab the props\n    // objects and grab its properties\n\n    \n\n    return (\n        <div className='pa1'>\n        <input \n        className='pa3 ba b--orange bg-washed-red b'\n        type=\"search\" \n        placeholder='Search Robots'\n        value={searchField}\n        // value: plays the role of setting or returning the the value of the value attirbute of  atext field. \n        // so usally it will be the default value or the value a user types in.\n        onChange = {searchChange}\n\n        // onchange event occurs when the value of an element has been changed.\n        // so whats happening here is that we are tackong for changes in the value\n        // within the SearchBox\n\n        />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) =>{\n    return(\n            <div style={{overflowY: 'scroll', border:'2px solid transparent',height:'800px'}}>\n            {props.children}    \n            </div>\n    )\n}\n\n//this componet was created so that there was a maxium\n// scroll area to keep functionality regardless of the screen size \n// so if you chnge border color to solid black youll see there is a \n// border in which your able to scroll in. this works beuccase \n// <scroll> in App.js only wraps the cardlist.\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({hasError: true})\n    }\n\n    //thisiswhat makes a class component an error boundary. it could either be a \n    // componentDidCatch or getDerivedStateFromError() lifecycle method. the dif\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","// this was created so that all our app components (features) are in one place.\n\nimport React, { Component} from 'react';\n// {component} is brought here instead of doing React.component below (where component is). cleaner code\n\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\n// import { robots } from \"./robots\";\nimport './App.css';\nimport Scroll from '../Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundry';\n\n\n\nclass App extends Component {\n// in order to use states you need class components: class components have \n// buit in state Object.\n\n//apps that have state are called smartcomponets\n\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            // robots:robots,\n\n            // to clarify this object key was the actual robots File. it is contained within the state\n            // which is contained within the app constructor. so now that weve made robots (which was a prop) \n            // into a state here, it can be manipulated and re-rendered. look below at this.state.robots\n\n            // now instead we are fetching the robot details from an API below\n\n            searchField: ''\n            // again this is not random - if you check searchBox fle you will see the value of the \n            // input box is searchField. go look there. \n\n        //   describign the app. so this is describing the things that can change \n        //   in our App. so the state objects that can ame amended\n        //   and thus lead to re-rendering.  \n\n        // these usally live in parent component.\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        //this is getting the users from an API which is more\n        // realistic to what you would be doing in real life\n\n       // componendidMount invokes immediatly after a component is mounted (ie.\n      //inserted into the tree)\n\n      //also becuase this is a inbuilt function there\n      //is no need to use arrow functions \n        .then(response => response.json())\n        .then(users =>this.setState({robots: users}));\n        //updating the users (robots info) from the api\n\n    }\n\n    onSearchChange = (event) => {\n        // rule of thumb. whenver you create your own methods on react make sure to use this syntax \n        // so whats been adde to the above is the \"=\" sign between onsearchchange and (event) and the arrow after the brackets\n        \n        // the reason for this is so that the \"this.state.robots.. & this.state.search...\" just below refers to the state\n        // // above and not there orignals which arent on this page (there in the robots & searchbox page)\n\n        this.setState({searchField: event.target.value})\n            // - this.setState: this what will request the parent element to re-render a value\n            // - event.target.value: retreives the value of whatever input it was called on.\n            // so here for instance whatever value is inputted into the searchfiedl which is the value of the\n            // searchbox then it will retreive it.\n        }\n\n    // function that console.logs changes in value to the SearchBox\n    // to backtrack look at searchbox file value and follow to here\n\n    render () {\n        const {robots, searchField} = this.state\n        //used destrufutirng so that we can remove \n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n\n          // this is filtering the robots according to the changes made in the searchfield \n            // - toLowerCase: changes all the robots names to lowercase so that its easy to compare the input Text\n            // with the names of the robot and match them when you search it in.\n\n        if(robots.length=== 0) {\n            return <h1>Loading! Please Wait</h1>\n        } else {\n\n            //this is incase the API takes long to load. this way\n            // the user isnt just stuck with a loading page. \n\n    return (\n        <div className='tc'>\n        <h1 className='mv3' style={{fontSize: '4rem'}}>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n       \n        {/* anytime the input of searchChange changes it will trigger the function onSearchChange\n        and console.log the event.  */}\n        {/* \"=\" is the value from the prop you want to pull */}\n\n        {/* explain: \n        1. we call for a render with the searchChange element.\n        2. react calls the SearchBox compomnnt with the onChange event as its prop (since searchChange\n        is given the onChange event n the searchBox file)\n        3. when a change in the value of the searchbox is made, the prop triggers the function\n        onSearchChange and as a result the console logs what changes have been made. */}\n\n        <Scroll>\n            <ErrorBoundary>\n             <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n        </Scroll>  \n             {/* so that our code is cleaner we have created a specific file\n             for the cards called cardlist. this is now grabbing those value from that component \n             Cardlist is also now acceptng robots as a prop. remember that \n             props are passng values, usually html elements. this is apssing the robots objects.\n\n           filteredRobots -  (this.state.robots) so now we have the filteredrobots prop that filters through the robots \n           and renders the robot that the user inputs. \n \n             this.state.robots: to add to this. Cardlist is taking robots as a prop. that prop\n             is passng html elements to cardlist component. (look at cardlist file and see what it is dooing\n             to those html elements). Despite the fact that robots is a prop to cardlist here it is a state and thus it can be manipulated\n             so essnetially it is playing both roles. the only reason it can now be changed is becuase it is within\n             the state contained within the app constructor  */}\n\n        </div>\n  \n        );\n    \n    }\n}\n\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Containers/App';\n// this was created so that all our app components (features) are in one place.\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\n// continuing from robofrieds (default) here we put curly brackets\n// becuase we will be importing specific objects within the robots\n// file as opposed to importing the whole file as one single object.\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}